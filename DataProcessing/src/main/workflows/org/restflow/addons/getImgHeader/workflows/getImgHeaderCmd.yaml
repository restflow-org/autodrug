namespace:

  module: getImgHeader
  route: Test

imports:

- classpath:org/restflow/addons/getImgHeader/workflows/getImgHeader.yaml

components:

- id: Workflow
  type: Workflow
  properties: 
    director: !ref PublishSubscribeDirector
    inputs:
      imagePath:
        description: full path of image file
      validatePath:
        description: path to file that contains the header contents in yaml format for comparison.
    nodes:
    - !lref Inputs
    - !lref RunGetImgHeader
    - !lref AssertOutput
    - !lref Outputs
    outputs:
      oscStart: /oscStart
      oscRange: /oscRange
      size1: /size1
      size2:  /size2
      beamCenterX: /beamCenterX
      beamCenterY: /beamCenterY
      pixelSize: /pixelSize
      detector: /detector

- id: Inputs
  type: InPortal
  properties: 
    outflows: 
      imagePath: /in/image/path
      validatePath: /validatePath

- id: RunGetImgHeader
  type: Step 
  properties:
    nestedUriPrefix: /getImgHeader/
    inflows:
      imagePath: /in/image/path
    actor: !ref getImgHeader.Workflow
    outflows:
      headerMap: /headerMap
      oscStart: /oscStart
      oscRange: /oscRange
      size1: /size1
      size2:  /size2
      beamCenterX: /beamCenterX
      beamCenterY: /beamCenterY
      pixelSize: /pixelSize
      detector: /detector
      wavelength: /wavelength


- id: AssertOutput
  type: GroovyActorNode
  properties:
    stepsOnce: true 
    actor.step: |
      import org.yaml.snakeyaml.*;
      Yaml y = new Yaml();      
      assertValues = y.load( new File(validatePath).text ); 
      
      assert headerMap.oscStart == assertValues.oscStart;
      assert headerMap.oscRange == assertValues.oscRange;
      assert headerMap.size1 == assertValues.size1;
      assert headerMap.size2 == assertValues.size2;
      println headerMap.beamCenterX
      println assertValues.beamCenterX;
      assert headerMap.beamCenterX == assertValues.beamCenterX as float;
      assert headerMap.beamCenterY == assertValues.beamCenterY as float;
      assert headerMap.pixelSize== assertValues.pixelSize as float;
      assert headerMap.wavelength.toFloat() == assertValues.wavelength as float;

      done = true
    actor.inputs:
      validatePath:
      headerMap:
      oscStart:
      oscRange: 
      size1:
      size2:
      beamCenterX:
      beamCenterY:
      pixelSize:
      detector:
      wavelength:
    inflows:
      headerMap: /headerMap
      oscStart: /oscStart
      oscRange: /oscRange
      size1: /size1
      size2:  /size2
      beamCenterX: /beamCenterX
      beamCenterY: /beamCenterY
      pixelSize: /pixelSize
      detector: /detector
      wavelength: /wavelength
      validatePath: /validatePath
    outflows:
      done: control:/done


- id: Outputs
  type: OutPortal
  properties: 
    inflows:
      done: control:/done
      oscStart: /oscStart
      oscRange: /oscRange
      size1: /size1
      size2:  /size2
      beamCenterX: /beamCenterX
      beamCenterY: /beamCenterY
      pixelSize: /pixelSize
      detector: /detector


