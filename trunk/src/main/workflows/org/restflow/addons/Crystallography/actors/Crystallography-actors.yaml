namespace:

  module: Crystallography

imports:

- classpath:org/restflow/addons/Crystallography/map/spacegroup.yaml
- classpath:org/restflow/addons/Crystallography/map/enant.yaml

types:

- id: GroovyTemplateScriptRunnerActor
  className: org.restflow.addons.shell.GroovyTemplateScriptRunnerActor
  singleton: false

components: 


- id: Actor.SetEnvironment
  type: GroovyActor
  properties:
    inputs: 
      env_script:
      project:
        default: project
      debug:
        default: false
    step: |
      println ""
      println new Date().format('HH:mm:ss') + "   Setting up environment for $project";
      cmd1 = "chmod +x $env_script";
      cmd1.execute().text;
      
      setenvCmd = ['tcsh', '-c', env_script];
      ProcessBuilder pb = new ProcessBuilder(setenvCmd).redirectErrorStream(true);
      env = pb.start().text.split('\n');
      
      if ( debug ) {
        println setenv;
        print "which labelit.index".execute(env, new File(env_script.parent)).text;
        print "which fft".execute(env, new File(env_script.parent)).text;
      }
    outputs:
      env:

- id: SpaceGroup_StringToNumber
  type: GroovyActor
  properties: 
    settings: 
      SpaceGroupMap: !ref Crystallography.SpaceGroup_StringToNumberMap
    inputs: 
      spaceGroup: 
    step: |
      spaceGroupNum = SpaceGroupMap[spaceGroup];
    outputs: 
      spaceGroupNum: 

- id: SpaceGroup_NumberToString
  type: GroovyActor
  properties: 
    settings: 
      SpaceGroupMap: !ref Crystallography.SpaceGroup_NumberToStringMap
    inputs: 
      spaceGroupNum: 
    step: |
      spaceGroup = SpaceGroupMap[spaceGroupNum];
    outputs: 
      spaceGroup: 


- id: EnantNumFinder
  type: GroovyActor
  properties:
    settings:
      EnantMap: !ref Crystallography.EnantiomorphMap
      SpaceGroupMap: !ref Crystallography.SpaceGroup_NumberToStringMap
    inputs:
      SpaceGroup:
    step: |
      println new Date().format('HH:mm:ss') + "   Checking for possible enantiomorphs";
      enant = EnantMap[SpaceGroup];
      //println enant;
      if (enant == null) {
        enant = 0;
      }
      else {
        // output info //
        println "";
        println "Possible enantiomorph: " + SpaceGroupMap[enant];
        println "";
      }
      //println enant;
    outputs:
      enant: 


#take a hashmap with unit cell keywords and print it in order.  Makes reporting easier.
- id: Actor.PrintUnitCell
  className: ssrl.workflow.actors.GroovyTemplateActor
  properties:
    settings:
      _template: "$unitcell.a $unitcell.b $unitcell.c $unitcell.alpha $unitcell.beta $unitcell.gamma"
    inputs: 
      unitcell:
    outputs:
      view:




#feed this actor inputs that should be empty and it will throw an exception when it finds content.  
#Typical use: sending it the stderr of a script.
- id: Actor.AssertInputsEmpty
  type: GroovyActor
  properties:
    step: |
      _inputs.each {k, v -> 
        if (v == null) return;
        if (v == '') return;
        if (v instanceof java.io.File) {
          println "file"
          if ( ! v.exists() ) return;
          if ( v.text == '') return;
        }
        throw new Exception ("$k is not empty: $v");
      }
      ok = true;
    outputs:
      ok:

#feed this actor inputs that should not be empty and it will disable its output when it finds a null or blank, otherwise
#it the input will be available as an output.
#Typical use: sending it the stdout of a script or implementing control flow based on nulls.
- id: Actor.EndFlowOnEmpty
  type: GroovyActor
  properties:
    step: |
      _inputs.each {k, v -> 
        if (v == null) _status.disableOutput(k);
        if (v == '')  _status.disableOutput(k);
        if (v instanceof java.io.File) {
          if ( ! v.exists() )  _status.disableOutput(k);
          if ( v.text == '')  _status.disableOutput(k);
        }
      }

